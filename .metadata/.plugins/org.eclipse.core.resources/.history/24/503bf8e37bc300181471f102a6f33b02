package com.ddm.salonmanager.api.cors;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import com.ddm.climatempo.api.config.property.ClimaTempoApiProperty;

@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class CorsFilter implements Filter{

	@Autowired
	private ClimaTempoApiProperty salonManagerApiProperty;
	


	@Override
	public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
			throws IOException, ServletException {
		
		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) resp;
		//estão fora do options pois serão enviados em todas as requisições, para funcionar os demais (post, get...)
		response.setHeader("Access-Control-Allow-Origin", salonManagerApiProperty.getOriginPermitida()); 	//Configurar para diferentes ambientes(produção/desenvolvimento)
		response.setHeader("Access-Control-Allow-Credentials", "true"); //para envio do cookie, no refresh_token
	
		//se a requisição for do tipo options, tratará caso contrário continuará com o filtro normalmente. E se a origem permitida for igual a origem do browser
		if ("OPTIONS".equals(request.getMethod()) && salonManagerApiProperty.getOriginPermitida().equals(request.getHeader("Origin"))){
			//métodos que serão permitidos no filtro.Passados no header.
			response.setHeader("Access-Control-Allow-Methods", "POST, GET, DELETE, PUT, OPTIONS");
			response.setHeader("Access-Control-Allow-Headers", "Authorization, Content-Type, Accept");
			response.setHeader("Access-Control-Max-Age", "3600"); //tempo da próxima requisição. 1h
			
			response.setStatus(HttpServletResponse.SC_OK);
		} else { //para o filtro e não precisa continuar a requisição.
			
			chain.doFilter(req, resp);
		}
		
	}
	
	@Override
	public void destroy() {
			
	}


	@Override
	public void init(FilterConfig arg0) throws ServletException {
			
	}

}
