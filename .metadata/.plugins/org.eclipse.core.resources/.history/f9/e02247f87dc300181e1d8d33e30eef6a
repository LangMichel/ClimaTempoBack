package com.ddm.salonmanager.api.resource;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ddm.climatempo.api.event.RecursoCriadoEvent;
import com.ddm.climatempo.api.model.Marca;
import com.ddm.climatempo.api.repository.MarcaRepository;
import com.ddm.climatempo.api.repository.filter.MarcaFilter;
import com.ddm.salonmanager.api.repository.projection.ResumoMarca;
import com.ddm.salonmanager.api.service.MarcaService;

//Meta dados. Irá converter o retorno para JSON
//Mapping é o mapeamento da requisição - quando vier no http.../marcas
@RestController
@RequestMapping("/marcas")
public class MarcaResource {
	
	//o sprint procura a implementação e retorna aqui na classe. 
	@Autowired
	private MarcaRepository marcaRepository;
	
	@Autowired
	private MarcaService marcaService;
	
	@Autowired
	private ApplicationEventPublisher publisher;
	
	//permitir com que todas as origens sejam validadas.
	//maxAge significa quanto tempo irá demorar para a requisição preflighted fazer outra após ter a primeira validada.
	//@CrossOrigin (maxAge = 10, origins = { "http://localhost:8000" })
	/*@GetMapping
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_MARCA') and #oauth2.hasScope('read')")
	public List<Marca> listar(){
		return marcaRepository.findAll();
	public ResponseEntity<?> listar() { //entidade de resposta. Ainda sem tipo definido, pois será escolhido como resposta
		List<Marca> marcas = marcaRepository.findAll();
		return !marcas.isEmpty() ? ResponseEntity.ok(marcas) : ResponseEntity.noContent().build();
		
		//na linha acima retorna a marca caso não esteja vazio, e not found caso esteja vazia. Build precisa para gerar o response entity
		
	}*/
	
	@GetMapping
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_MARCA') and #oauth2.hasScope('read')")
	public Page<Marca> pesquisar(MarcaFilter marcaFilter, Pageable pageable) {
		return marcaRepository.filtrar(marcaFilter, pageable);
		 //o preAuthorize pode estar antes ou depois do get/post/put...
		//o preAuthorize é a autorização do usuário, o oauth2.hasScope é do client.
	}
	
	@GetMapping(params = "resumo")
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_MARCA') and #oauth2.hasScope('read')")
	public Page<ResumoMarca> resumir(MarcaFilter marcaFilter, Pageable pageable) {
		return marcaRepository.resumir(marcaFilter, pageable);
	}
	
	
	
	//requestbody mapeia a classe e os campos que irão salvar
	//Valid vai validar a classe marca conforme informado no campo nm_Marca sendo not null. a Anotaçaõ valida a classe.
	@PostMapping
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_MARCA') and #oauth2.hasScope('write')")
	public ResponseEntity<Marca> criar(@Valid @RequestBody Marca marca, HttpServletResponse response) {
		Marca marcaSalva = marcaRepository.save(marca);
		//marcaRepository.save(marca);
		
		publisher.publishEvent(new RecursoCriadoEvent(this, response, marcaSalva.getCd_Marca()));
		
		return ResponseEntity.status(HttpStatus.CREATED).body(marcaSalva);
		//retornará o status 201 - created no html
		
	}
	
	@GetMapping("/{cd_Marca}")
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_MARCA') and #oauth2.hasScope('read')")
	public ResponseEntity<Marca> buscarPeloCodigo (@PathVariable Long cd_Marca) {
		Marca marca = marcaRepository.findOne(cd_Marca);
		return marca != null ? ResponseEntity.ok(marca) : ResponseEntity.notFound().build(); 
		//return marcaRepository.findOne(cd_Marca);
	}
	
	@DeleteMapping("/{cd_Marca}")
	@ResponseStatus(HttpStatus.NO_CONTENT) //retornará codigo 204, significa que efetuou com sucesso porém nao existe retorno
	public void remover(@PathVariable Long cd_Marca) {
		marcaRepository.delete(cd_Marca);
		
	}
	
	
	@PutMapping("/{cd_Marca}")
	@PreAuthorize("hasAuthority('ROLE_EDITAR_MARCA') and #oauth2.hasScope('write')")
	public ResponseEntity<Marca> atualizar(@PathVariable Long cd_Marca, @Valid @RequestBody Marca marca) {
		Marca marcaSalva = marcaService.atualizar(cd_Marca, marca);
		return ResponseEntity.ok(marcaSalva);
		
	}
	
	
	@PutMapping("/{cd_Marca}/ativo")
	@PreAuthorize("hasAuthority('ROLE_EDITAR_MARCA') and #oauth2.hasScope('write')")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void atualizarAtivo(@PathVariable long cd_Marca, @RequestBody Boolean ativo) {
		marcaService.atualizarAtivo(cd_Marca, ativo);
	}

}
