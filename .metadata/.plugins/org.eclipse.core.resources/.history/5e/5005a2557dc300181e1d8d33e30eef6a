package com.ddm.salonmanager.api.resource;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ddm.climatempo.api.event.RecursoCriadoEvent;
import com.ddm.salonmanager.api.model.Lancamento;
import com.ddm.salonmanager.api.repository.LancamentoRepository;
import com.ddm.salonmanager.api.repository.filter.LancamentoFilter;
import com.ddm.salonmanager.api.repository.projection.ResumoLancamento;
import com.ddm.salonmanager.api.service.LancamentoService;

@RestController
@RequestMapping("/lancamento")
public class LancamentoResource {
	
	@Autowired
	private LancamentoRepository lancamentoRepository;
	
	@Autowired
	private LancamentoService lancamentoService;
	
	@Autowired
	private ApplicationEventPublisher publisher;
	
	@GetMapping
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_LANCAMENTO') and #oauth2.hasScope('read')")
	public Page<Lancamento> pesquisar(LancamentoFilter lancamentoFilter, Pageable pageable) {
		return lancamentoRepository.filtrar(lancamentoFilter, pageable);
		 //o preAuthorize pode estar antes ou depois do get/post/put...
		//o preAuthorize é a autorização do usuário, o oauth2.hasScope é do client.
	}
	
	@GetMapping(params = "resumo")
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_LANCAMENTO') and #oauth2.hasScope('read')")
	public Page<ResumoLancamento> resumir(LancamentoFilter lancamentoFilter, Pageable pageable) {
		return lancamentoRepository.resumir(lancamentoFilter, pageable);
	}
	
	@PostMapping
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_LANCAMENTO') and #oauth2.hasScope('write')")
	public ResponseEntity<Lancamento> criar(@Valid @RequestBody Lancamento lancamento, HttpServletResponse response) {
		Lancamento lancamentoSalvo = lancamentoRepository.save(lancamento);
		
		publisher.publishEvent(new RecursoCriadoEvent(this, response, lancamentoSalvo.getCd_Lancamento()));
		
		return ResponseEntity.status(HttpStatus.CREATED).body(lancamentoSalvo);
	}
	
	@GetMapping("/{cd_Lancamento}")
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_LANCAMENTO') and #oauth2.hasScope('read')")
	public ResponseEntity<Lancamento> buscarPeloCodigo (@PathVariable Long cd_Lancamento) {
		Lancamento lancamento = lancamentoRepository.findOne(cd_Lancamento);
		return lancamento != null ? ResponseEntity.ok(lancamento) : ResponseEntity.notFound().build(); 
	}
	
	@DeleteMapping("/{cd_Lancamento}")
	@PreAuthorize("hasAuthority('ROLE_REMOVER_LANCAMENTO') and #oauth2.hasScope('write')")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remover(@PathVariable Long cd_Lancamento) {
		lancamentoRepository.delete(cd_Lancamento);
		
	}
	
	
	@PutMapping("/{cd_Lancamento}")
	@PreAuthorize("hasAuthority('ROLE_EDITAR_LANCAMENTO') and #oauth2.hasScope('write')")
	public ResponseEntity<Lancamento> atualizar(@PathVariable Long cd_Lancamento, @Valid @RequestBody Lancamento lancamento) {
		Lancamento lancamentoSalvo = lancamentoService.atualizar(cd_Lancamento, lancamento);
		return ResponseEntity.ok(lancamentoSalvo);
		
	}
	
	/*
	@PutMapping("/{cd_Servico}/ativo")
	@PreAuthorize("hasAuthority('ROLE_EDITAR_SERVICO') and #oauth2.hasScope('write')")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void atualizarAtivo(@PathVariable long cd_Servico, @RequestBody Boolean ativo) {
		servicoService.atualizarAtivo(cd_Servico, ativo);
	}
	*/

}
