package com.ddm.salonmanager.api.resource;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ddm.climatempo.api.event.RecursoCriadoEvent;
import com.ddm.salonmanager.api.model.Pessoa;
import com.ddm.salonmanager.api.repository.PessoaRepository;
import com.ddm.salonmanager.api.repository.filter.PessoaFilter;
import com.ddm.salonmanager.api.repository.projection.ResumoPessoa;
import com.ddm.salonmanager.api.service.PessoaService;

@RestController //meta dados. converte json em objeto
@RequestMapping ("/clientes")
public class PessoaResource {
	
	@Autowired
	private PessoaRepository pessoaRepository;
	
	@Autowired
	private PessoaService pessoaService;
	
	@Autowired
	private ApplicationEventPublisher publisher;

//	@GetMapping
//	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_PESSOA') and #oauth2.hasScope('read')")
//	public List<Pessoa> listar(){
//		return pessoaRepository.findAll();
//		//return funcionarioRepository.findAll();		
//	}
	
	@GetMapping
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_PESSOA') and #oauth2.hasScope('read')")
	public Page<Pessoa> pesquisar(PessoaFilter pessoaFilter, Pageable pageable) {
		return pessoaRepository.filtrar(pessoaFilter, pageable);
		 //o preAuthorize pode estar antes ou depois do get/post/put...
		//o preAuthorize é a autorização do usuário, o oauth2.hasScope é do client.
	}
	
	//parametro para distinguir qual método getmapping usar, se é pesquisar ou resumir
		@GetMapping(params = "resumo")
		@PreAuthorize("hasAuthority('ROLE_CONSULTAR_PESSOA') and #oauth2.hasScope('read')")
		public Page<ResumoPessoa> resumir(PessoaFilter pessoaFilter, Pageable pageable) {
			return pessoaRepository.resumir(pessoaFilter, pageable);
		}
	
	
	
	@PostMapping
	@PreAuthorize("hasAuthority('ROLE_CADASTRAR_PESSOA') and #oauth2.hasScope('write')")
	public ResponseEntity<Pessoa> criar(@Valid @RequestBody Pessoa pessoa, HttpServletResponse response) {
		Pessoa pessoaSalva = pessoaRepository.save(pessoa); //alterar para salvar ao invés de save. Verificar AgendamentoResouce
		//o this significa que na classe recursoCriadoEvent o "source" que recebe por parametro é passado no this, ou seja quem chama
		publisher.publishEvent(new RecursoCriadoEvent(this, response, pessoaSalva.getCd_Pessoa()));
		return ResponseEntity.status(HttpStatus.CREATED).body(pessoaSalva);
		//retornará o status 201 - created no html
		
	}
	
	@GetMapping("/{cd_Pessoa}")
	@PreAuthorize("hasAuthority('ROLE_CONSULTAR_PESSOA') and #oauth2.hasScope('read')")
	public ResponseEntity<Pessoa> buscarPeloCodigo (@PathVariable Long cd_Pessoa) {
		Pessoa pessoa = pessoaRepository.findOne(cd_Pessoa);
		//return pessoaRepository.findOne(cd_Pessoa);
		return pessoa != null ? ResponseEntity.ok(pessoa) : ResponseEntity.notFound().build();
	}
	
	@DeleteMapping("/{cd_Pessoa}")
	@ResponseStatus(HttpStatus.NO_CONTENT) //retornará codigo 204, significa que efetuou com sucesso porém nao existe retorno
	public void remover(@PathVariable Long cd_Pessoa) {
		pessoaRepository.delete(cd_Pessoa);
		
	}
	
	@PutMapping("/{cd_Pessoa}")
	@PreAuthorize("hasAuthority('ROLE_EDITAR_PESSOA') and #oauth2.hasScope('write')")
	public ResponseEntity<Pessoa> atualizar(@PathVariable Long cd_Pessoa, @Valid @RequestBody Pessoa pessoa) {
		Pessoa pessoaSalva = pessoaService.atualizar(cd_Pessoa, pessoa);
		return ResponseEntity.ok(pessoaSalva);
		
	}
	
	
	@PutMapping("/{cd_Pessoa}/ativo")
	@PreAuthorize("hasAuthority('ROLE_EDITAR_PESSOA') and #oauth2.hasScope('write')")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void atualizarAtivo(@PathVariable long cd_Pessoa, @RequestBody Boolean ativo) {
		pessoaService.atualizarAtivo(cd_Pessoa, ativo);
		
	}
	
}
