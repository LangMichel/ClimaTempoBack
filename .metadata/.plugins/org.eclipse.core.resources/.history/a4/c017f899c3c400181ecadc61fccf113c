package com.ddm.climatempo.api.service;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;
import com.ddm.climatempo.api.model.Cidade;
import com.ddm.climatempo.api.model.Clima;
import com.ddm.climatempo.api.repository.CidadeRepository;
import net.aksingh.owmjapis.core.OWM;
import net.aksingh.owmjapis.api.APIException;
import net.aksingh.owmjapis.model.CurrentWeather;
import net.aksingh.owmjapis.model.CurrentWeatherList;
import net.aksingh.owmjapis.model.DailyWeatherForecast;
import net.aksingh.owmjapis.model.param.Weather;


@Service
public class CidadeService {
	
	@Autowired
	private CidadeRepository cidadeRepository;
	
	public Cidade atualizar (long cd_Cidade, Cidade cidade) {
		Cidade cidadeSalva = encontrarCidadePorCodigo(cd_Cidade); 
		
		BeanUtils.copyProperties(cidade, cidadeSalva, "cd_Cidade");
		
		return cidadeRepository.save(cidadeSalva);
	}
	
	public Cidade encontrarCidadePorCodigo(long cd_Cidade) {
		Cidade cidadeSalva = cidadeRepository.findOne(cd_Cidade);
		
		if (cidadeSalva == null){
			throw new EmptyResultDataAccessException(1);
		}
		return cidadeSalva;
	}
	
	public Cidade consultarClima(long cd_Cidade) throws APIException {
		
		Cidade cidadeSalva = cidadeRepository.findOne(cd_Cidade);
		String apiKey;
		String filtroCidade;
		
		apiKey = "eb8b1a9405e659b2ffc78f0a520b1a46";
		
		if (cidadeSalva == null){
			throw new EmptyResultDataAccessException(1);
		}
		
		OWM owm = new OWM(apiKey);
		
		filtroCidade = cidadeSalva.getNm_Cidade() + ", " + cidadeSalva.getSg_Pais().toUpperCase();
		
		DailyWeatherForecast forecast = owm.dailyWeatherForecastByCityName(filtroCidade);
		
		System.out.println(forecast.getDataCount());
		if (forecast.getDataCount() > 0) {
			Clima clima = new Clima();
			List<Clima> forecastClima = new List<Clima>();
			
			
			
		}
		
		System.out.println(teste2.getDataCount());
		System.out.println(teste2.getDataList());
		System.out.println(teste2.getCityData().getId());
		System.out.println(teste2.getCityData().getName());
		System.out.println(teste2.getDataList().get(0).getHumidity());
		System.out.println(teste2.getDataList().get(0).getDateTime());
		System.out.println(teste2.getDataList().get(1).getDateTime());
		System.out.println(teste2.getDataList().get(0).getWeatherList().get(0).getIconLink());
		System.out.println(teste2.getDataList().get(0).getRain());
		System.out.println(teste2.getDataList().get(0).getTempData().getTempMin() - 273.15);
		System.out.println(teste2.getDataList().get(1).getTempData().getTempMin() - 273.15);
		System.out.println((teste2.getDataList().get(0).getTempData().getTempDay() - 273.15));
		System.out.println(teste2.getDataList().get(1).getTempData().getTempDay()- 273.15);
		System.out.println(teste2.getDataList().get(0).getTempData().getTempMorning() - 273.15);
		System.out.println(teste2.getDataList().get(1).getTempData().getTempMorning() - 273.15);
		
		
		
		
		return null;
	}

}
