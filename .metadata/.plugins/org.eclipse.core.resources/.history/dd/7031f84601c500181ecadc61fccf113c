package com.ddm.climatempo.api.service;

import java.text.ParseException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;

import javax.swing.plaf.synth.SynthSeparatorUI;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;
import com.ddm.climatempo.api.model.Cidade;
import com.ddm.climatempo.api.model.Clima;
import com.ddm.climatempo.api.repository.CidadeRepository;
import net.aksingh.owmjapis.core.OWM;
import net.aksingh.owmjapis.api.APIException;
import net.aksingh.owmjapis.model.DailyWeatherForecast;


@Service
public class CidadeService {
	
	@Autowired
	private CidadeRepository cidadeRepository;
	
	public Cidade atualizar (long cd_Cidade, Cidade cidade) {
		Cidade cidadeSalva = encontrarCidadePorCodigo(cd_Cidade); 
		
		BeanUtils.copyProperties(cidade, cidadeSalva, "cd_Cidade");
		
		return cidadeRepository.save(cidadeSalva);
	}
	
	public Cidade encontrarCidadePorCodigo(long cd_Cidade) {
		Cidade cidadeSalva = cidadeRepository.findOne(cd_Cidade);
		
		if (cidadeSalva == null){
			throw new EmptyResultDataAccessException(1);
		}
		return cidadeSalva;
	}
	
	public List<Clima> consultarClima(long cd_Cidade) throws APIException, ParseException {
		
		Cidade cidadeSalva = cidadeRepository.findOne(cd_Cidade);
		String apiKey;
		String filtroCidade;
		List<Clima> forecastClima = new ArrayList<>();
		
		apiKey = "eb8b1a9405e659b2ffc78f0a520b1a46";
		
		if (cidadeSalva == null){
			throw new EmptyResultDataAccessException(1);
		}
		
		OWM owm = new OWM(apiKey);
		
		filtroCidade = cidadeSalva.getNm_Cidade() + ", " + cidadeSalva.getSg_Pais().toUpperCase();
		
		DailyWeatherForecast forecast = owm.dailyWeatherForecastByCityName(filtroCidade);
		
		if (forecast.getDataCount() > 0) {
			LocalDate data;
			ZoneId defaultZoneId = ZoneId.systemDefault();
			
			for (int i = 0; i < (forecast.getDataCount() - 10); i++) {
				Clima clima = new Clima();
				clima.setTempDia(forecast.getDataList().get(i).getTempData().getTempDay() - 273.15);
				clima.setTempMin(forecast.getDataList().get(i).getTempData().getTempMin()  - 273.15);
				clima.setTempMax(forecast.getDataList().get(i).getTempData().getTempMax()  - 273.15);

				Instant instant = forecast.getDataList().get(i).getDateTime().toInstant();
				
				data = instant.atZone(defaultZoneId).toLocalDate();
				
				clima.setDataClima(data);
				clima.setUmidade(forecast.getDataList().get(i).getHumidity());
				clima.setLinkIcone(forecast.getDataList().get(i).getWeatherList().get(0).getIconLink());
				clima.setChuva(forecast.getDataList().get(i).getRain());
				clima.setClima(forecast.getDataList().get(i).getWeatherList().get(0).getMainInfo());
				clima.setNuvem(forecast.getDataList().get(i).getCloud());
				clima.setVento(forecast.getDataList().get(i).getSpeed());
				forecastClima.add(clima);
				
			}
			
		}
		
		return forecastClima;
	}
	
	public Integer verificarDadosClima (String nm_Cidade, String sg_Pais) throws APIException, ParseException {
		String apiKey;
		String filtroCidade;
		
		apiKey = "eb8b1a9405e659b2ffc78f0a520b1a46";
		
		OWM owm = new OWM(apiKey);
		
		filtroCidade = nm_Cidade + ", " + sg_Pais.toUpperCase();
		
		DailyWeatherForecast forecast = owm.dailyWeatherForecastByCityName(filtroCidade);
		
		System.out.println(forecast.getDataCount());
		System.out.println(forecast);
		
		
		return forecast.getDataCount();
		
		
	}

}
